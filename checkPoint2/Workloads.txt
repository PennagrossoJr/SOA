Workloads:


1. El primero se centra en la CPU. En este caso lo que solamente hacemos es un bucle de for de 1000 iteraciones en el cual hace un cálculo “tonto”, se podría “complicarlo” más.


2. El segundo se centra en el estado de Ready-Blocked (I/O burst). En este caso usamos la llamada al sistema que provoca un estado blocked de los procesos. 


3. El tercero es una mezcla de los dos anteriores pero en el cual se centra en la CPU (large CPU bursts) y tiene menos rafagas de I/O.




Discussion: 


1. CPU burst:
        
* RR →  Por lo que podemos ver es que nadie pasa por el estado Blocked. El tiempo (ticks) en el que tardan en hacer los cálculos, ya que es un cálculo como hemos mencionado antes es relativamente rápido.  


* FCFS → Podemos observar que como con RR, FCFS no deja executar el proceso IDLE, y los tiempos totales vienen a ser parecidos en los dos casos. 
        




2. I/O burst:


* RR → En este vemos claramente cómo los procesos pasan por los estados de Blocked a Ready como consecuencia del uso de la llamada read del sistema. Podemos ver que los ticks de los procesos son muy grandes.


* FCFS → No hay mucha diferencia con RR, aunque tuvimos un problema y nos salia page fault antes de que el último proceso pudiese imprimir sus tiempos.




3.  Large I/O CPU and short I/0 bursts:


* RR → En nos centramos más en la CPU, por eso los tiempos que están en el estado de Blocked es muy menor, y como las ráfagas de CPU los hace super rápidos, entonces los ticks son menores que los de Workload 2.


* FCFS → En este caso tuvimos un problema con los 2 últimos procesos hijos, con un page fault. Y el proceso idle era bastante alto.
